Require Import Coq.Program.Equality.
Require Import Coq.Lists.List.
Require Import Lia.

Require Import nbe.ptt.syntax.def.

Definition subst0 : Exp -> Exp -> Exp :=
  fun t s => t [ subst_ext subst_id s ].

Notation "t [| s ]" := (subst0 t s)
  (at level 54, left associativity).

Reserved Notation "‚ä¢ Œì"
  (at level 55, Œì at next level, no associativity).
Reserved Notation "‚ä¢ Œì ‚âà Œì'"
  (at level 55, Œì at next level, no associativity).
Reserved Notation "Œì ‚ä¢ t : T"
  (at level 55, t at next level, no associativity).
Reserved Notation "Œì ‚ä¢s œÉ : Œî"
  (at level 55, œÉ at next level, no associativity).
Reserved Notation  "Œì ‚ä¢ t ‚âà t' : T" 
  (at level 55, t at next level, t' at next level, no associativity).
Reserved Notation  "Œì ‚ä¢s œÉ ‚âà œÉ' : Œî" 
  (at level 55, œÉ at next level, œÉ' at next level, no associativity).
Inductive WfCtx : Ctx -> Prop :=
| wf_ctx_nil : ‚ä¢ nil
| wf_ctx_cons : forall Œì T i,
  ‚ä¢ Œì ->
  Œì ‚ä¢ T : (ùïä i) ->
  ‚ä¢ (T :: Œì)
with EqCtx : Ctx -> Ctx -> Prop :=
| eq_ctx_nil : ‚ä¢ nil ‚âà nil
| eq_ctx_cons : forall Œì Œì' T T' i,
  ‚ä¢ Œì ‚âà Œì' ->
  Œì ‚ä¢ T : ùïä i ->
  Œì' ‚ä¢ T' : ùïä i ->
  Œì ‚ä¢ T ‚âà T' : ùïä i ->
  Œì' ‚ä¢ T ‚âà T' : ùïä i ->
  ‚ä¢ (T :: Œì) ‚âà (T' :: Œì')
with Typing : Ctx -> Exp -> Exp -> Prop :=
| typing_nat : forall Œì i,
  ‚ä¢ Œì ->
  Œì ‚ä¢ exp_nat : (ùïä i)
| typing_set : forall Œì i,
  ‚ä¢ Œì ->
  Œì ‚ä¢ (ùïä i) : (exp_set (1 + i))
| typing_pi : forall Œì S T i,
  Œì ‚ä¢ S : ùïä i ->
  (S :: Œì) ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ exp_pi S T : ùïä i
| typing_var : forall Œì n T,
  ‚ä¢ Œì ->
  n : T ‚àà Œì ->
  Œì ‚ä¢ (exp_var n) : T
| typing_zero : forall Œì,
  ‚ä¢ Œì ->
  Œì ‚ä¢ exp_zero : exp_nat
| typing_suc : forall Œì t,
  Œì ‚ä¢ t : exp_nat ->
  Œì ‚ä¢ (exp_suc t) : exp_nat
| typing_rec : forall Œì tz ts tn T i,
  (‚Ñï :: Œì) ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ tz : T [| exp_zero ] ->
  (T :: ‚Ñï :: Œì) ‚ä¢ ts : ( T [ subst_ext (‚Üë ‚àò ‚Üë) (exp_suc (exp_var 1)) ] ) ->
  Œì ‚ä¢ tn : ‚Ñï ->
  Œì ‚ä¢ exp_rec T tz ts tn : T [| tn ]
| typing_abs : forall Œì t S T i,
  Œì ‚ä¢ S : ùïä i ->
  (S :: Œì) ‚ä¢ t : T ->
  Œì ‚ä¢ (exp_abs t) : (exp_pi S T) 
| typing_app : forall Œì r s S T i,
  Œì ‚ä¢ S : ùïä i ->
  (S :: Œì) ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ r : exp_pi S T ->
  Œì ‚ä¢ s : S ->
  Œì ‚ä¢ r ‚ñ´ s : T [| s ]
| typing_subst : forall Œì Œî œÉ t T,
  Œì ‚ä¢s œÉ : Œî ->
  Œî ‚ä¢ t : T ->
  Œì ‚ä¢ t [ œÉ ] : T [ œÉ ]
| typing_cumu : forall Œì T i,
  Œì ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ T : exp_set (1 + i)
| typing_conv : forall Œì t S T i,
  Œì ‚ä¢ t : T ->
  Œì ‚ä¢ T ‚âà S : ùïä i ->
  Œì ‚ä¢ t : S
with SubstTyping : Ctx -> Subst -> Ctx -> Prop :=
| subst_typing_id : forall Œì,
  ‚ä¢ Œì ->
  Œì ‚ä¢s subst_id : Œì
| subst_typing_shift : forall Œì T,
  ‚ä¢ (T :: Œì) ->
  (T :: Œì) ‚ä¢s ‚Üë : Œì
| subst_typing_comp : forall Œì1 Œì2 Œì3 œÉ1 œÉ2,
  Œì1 ‚ä¢s œÉ1 : Œì2 ->
  Œì2 ‚ä¢s œÉ2 : Œì3 ->
  Œì1 ‚ä¢s œÉ2 ‚àò œÉ1 : Œì3
| subst_typing_ext : forall Œì Œî œÉ t T i,
  Œì ‚ä¢s œÉ : Œî ->
  Œî ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ t : T [ œÉ ] ->
  Œì ‚ä¢s subst_ext œÉ t : (T :: Œî)
| subst_typing_conv : forall Œì Œî Œî' œÉ,
  Œì ‚ä¢s œÉ : Œî ->
  ‚ä¢ Œî ‚âà Œî' ->
  Œì ‚ä¢s œÉ : Œî'
with EqExp : Ctx -> Exp -> Exp -> Exp -> Prop :=
| eq_exp_prop_nat : forall Œì Œî œÉ i,
  Œì ‚ä¢s œÉ : Œî ->
  Œì ‚ä¢ ‚Ñï [ œÉ ] ‚âà ‚Ñï : ùïä i
| eq_exp_prop_set : forall Œì Œî œÉ i,
  Œì ‚ä¢s œÉ : Œî ->
  Œì ‚ä¢ ùïä i [ œÉ ] ‚âà ùïä i : exp_set (1 + i)
| eq_exp_prop_pi : forall Œì Œî œÉ S T i,
  Œì ‚ä¢s œÉ : Œî ->
  Œî ‚ä¢ S : ùïä i ->
  (S :: Œî) ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ exp_pi S T [ œÉ ] ‚âà exp_pi (S [ œÉ ]) (T [subst_ext (œÉ ‚àò ‚Üë) (exp_var 0)]) : ùïä i
| eq_exp_prop_zero : forall Œì Œî œÉ,
  Œì ‚ä¢s œÉ : Œî ->
  Œì ‚ä¢ exp_zero ‚âà exp_zero [ œÉ ] : ‚Ñï
| eq_exp_prop_suc : forall Œì Œî t œÉ,
  Œì ‚ä¢s œÉ : Œî ->
  Œî ‚ä¢ t : ‚Ñï ->
  Œì ‚ä¢ exp_suc t [ œÉ ] ‚âà exp_suc (t [ œÉ ]) : ‚Ñï
| eq_exp_prop_app : forall Œì Œî r s œÉ S T i,
  Œì ‚ä¢s œÉ : Œî ->
  Œî ‚ä¢ r : exp_pi S T ->
  Œî ‚ä¢ S : exp_set i ->
  (S :: Œî) ‚ä¢ T : exp_set i ->
  Œî ‚ä¢ s : S ->
  Œì ‚ä¢ (r ‚ñ´ s) [ œÉ ] ‚âà (r [ œÉ ]) ‚ñ´ (s [ œÉ ]) : T [ subst_ext œÉ (s [ œÉ ]) ]
| eq_exp_prop_rec : forall Œì Œî œÉ tz ts tn T i,
  Œì ‚ä¢s œÉ : Œî ->
  (‚Ñï :: Œî) ‚ä¢ T : ùïä i ->
  Œî ‚ä¢ tz : T [| exp_zero ] ->
  (T :: ‚Ñï :: Œî) ‚ä¢ ts : T [ subst_ext ( ‚Üë ‚àò ‚Üë ) (exp_suc (exp_var 1)) ] ->
  Œî ‚ä¢ tn : ‚Ñï ->
  Œì ‚ä¢ exp_rec T tz ts tn [ œÉ ] ‚âà exp_rec (T [q œÉ]) (tz [œÉ]) (ts [q (q œÉ)]) (tn [ œÉ ]) : T [ subst_ext œÉ (tn [ œÉ ]) ]
| eq_exp_prop_abs : forall Œì Œî œÉ t S T,
  Œì ‚ä¢s œÉ : Œî ->
  (S :: Œî) ‚ä¢ t : T ->
  Œì ‚ä¢ (Œª t) [ œÉ ] ‚âà (Œª (t [q œÉ])) : (exp_pi S T) [ œÉ ]
| eq_exp_comp_pi : forall Œì S S' T T' i, 
  Œì ‚ä¢ S : ùïä i ->
  Œì ‚ä¢ S ‚âà S' : ùïä i ->
  (S :: Œì) ‚ä¢ T ‚âà T' : ùïä i ->
  Œì ‚ä¢ exp_pi S T ‚âà exp_pi S' T' : ùïä i
| eq_exp_comp_var : forall Œì n T,
  ‚ä¢ Œì ->
  n : T ‚àà Œì ->
  Œì ‚ä¢ exp_var n ‚âà exp_var n : T
| eq_exp_comp_zero : forall Œì,
  ‚ä¢ Œì ->
  Œì ‚ä¢ exp_zero ‚âà exp_zero : ‚Ñï
| eq_exp_comp_suc : forall Œì t t',
  Œì ‚ä¢ t ‚âà t' : ‚Ñï ->
  Œì ‚ä¢ exp_suc t ‚âà exp_suc t' : ‚Ñï
| eq_exp_comp_app : forall Œì r r' s s' S T i,
  Œì ‚ä¢ S : ùïä i ->
  (S :: Œì) ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ r ‚âà r' : exp_pi S T ->
  Œì ‚ä¢ s ‚âà s' : S ->
  Œì ‚ä¢ r ‚ñ´ s ‚âà r' ‚ñ´ s' : T [| s ]
| eq_exp_comp_rec : forall Œì tz tz' ts ts' tn tn' T T' i,
  (‚Ñï :: Œì) ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ tz ‚âà tz' : T [| exp_zero ] ->
  (T :: ‚Ñï :: Œì) ‚ä¢ ts ‚âà ts' : T [ subst_ext (‚Üë ‚àò ‚Üë) (exp_suc (exp_var 1)) ] ->
  Œì ‚ä¢ tn ‚âà tn' : ‚Ñï ->
  (‚Ñï :: Œì) ‚ä¢ T ‚âà T' : ùïä i ->
  Œì ‚ä¢ exp_rec T tz ts tn ‚âà exp_rec T' tz' ts' tn' : T [| tn ]
| eq_exp_comp_abs : forall Œì t t' S T i,
  Œì ‚ä¢ S : ùïä i ->
  (S :: Œì) ‚ä¢ t ‚âà t' : T ->
  Œì ‚ä¢ (Œª t) ‚âà (Œª t') : exp_pi S T
| eq_exp_comp_subst : forall Œì Œî t t' œÉ œÉ' T,
  Œì ‚ä¢s œÉ ‚âà œÉ' : Œî ->
  Œî ‚ä¢ t ‚âà t' : T ->
  Œì ‚ä¢ t [ œÉ ] ‚âà t' [ œÉ' ] : T [ œÉ ]
| eq_exp_beta_abs : forall Œì t s S T i,
  Œì ‚ä¢ S : ùïä i ->
  (S :: Œì) ‚ä¢ T : ùïä i ->
  (S :: Œì) ‚ä¢ t : T ->
  Œì ‚ä¢ s : S ->
  Œì ‚ä¢ (Œª t) ‚ñ´ s ‚âà t [| s ] : T [| s ] 
| eq_exp_beta_rec_zero : forall Œì tz ts T i,
  (‚Ñï :: Œì) ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ tz : T [| exp_zero ] ->
  (T :: ‚Ñï :: Œì) ‚ä¢ ts : T [ subst_ext (‚Üë ‚àò ‚Üë) (exp_suc (exp_var 1)) ] ->
  Œì ‚ä¢ exp_rec T tz ts exp_zero ‚âà tz : T [| exp_zero ]
| eq_exp_beta_rec_suc : forall Œì tz ts tn T i,
  (‚Ñï :: Œì) ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ tz : T [| exp_zero ] ->
  (T :: ‚Ñï :: Œì) ‚ä¢ ts : T [ subst_ext (‚Üë ‚àò ‚Üë) (exp_suc (exp_var 1)) ] ->
  Œì ‚ä¢ tn : ‚Ñï ->
  Œì ‚ä¢ exp_rec T tz ts (exp_suc tn) ‚âà ts [ subst_ext (subst_ext subst_id tn) (exp_rec T tz ts tn) ] : T [| exp_suc tn ]
| eq_exp_eta_abs : forall Œì t S T i,
  Œì ‚ä¢ S : ùïä i ->
  (S :: Œì) ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ t : exp_pi S T ->
  Œì ‚ä¢ t ‚âà exp_abs (t [ ‚Üë ] ‚ñ´ (exp_var 0)) : exp_pi S T
| eq_exp_subst_id : forall Œì t T,
  Œì ‚ä¢ t : T ->
  Œì ‚ä¢ t [ subst_id ] ‚âà t : T
| eq_exp_substs_shift : forall Œì S T n,
  n : T ‚àà Œì ->
  ‚ä¢ (S :: Œì) ->
  (S :: Œì) ‚ä¢ exp_var n [ ‚Üë ] ‚âà exp_var (1 + n) : T [ ‚Üë ]
| eq_exp_subst_comp : forall Œì1 Œì2 Œì3 œÉ1 œÉ2 t T,
  Œì1 ‚ä¢s œÉ1 : Œì2 ->
  Œì2 ‚ä¢s œÉ2 : Œì3 ->
  Œì3 ‚ä¢ t : T ->
  Œì1 ‚ä¢ t [ œÉ2 ‚àò œÉ1 ] ‚âà t [ œÉ2 ] [ œÉ1 ] : T [ œÉ2 ‚àò œÉ1 ]
| eq_exp_subst_ext_var_0 : forall Œì Œî œÉ s S i,
  Œì ‚ä¢s œÉ : Œî ->
  Œî ‚ä¢ S : ùïä i ->
  Œì ‚ä¢ s : S [ œÉ ] ->
  Œì ‚ä¢ exp_var 0 [ subst_ext œÉ s ] ‚âà s : S [ œÉ ] 
| eq_exp_subst_ext_var_sn : forall Œì Œî œÉ s S T n i,
  Œì ‚ä¢s œÉ : Œî ->
  Œî ‚ä¢ S : ùïä i ->
  Œì ‚ä¢ s : S [ œÉ ] ->
  n : T ‚àà Œî ->
  Œì ‚ä¢ exp_var (1 + n) [ subst_ext œÉ s ] ‚âà exp_var n [ œÉ ] : T [ œÉ ]
| eq_exp_conv : forall Œì t t' T T' i,
  Œì ‚ä¢ t ‚âà t' : T ->
  Œì ‚ä¢ T ‚âà T' : ùïä i ->
  Œì ‚ä¢ t ‚âà t' : T'
| eq_exp_cumu : forall Œì T T' i,
  Œì ‚ä¢ T ‚âà T' : ùïä i ->
  Œì ‚ä¢ T ‚âà T' : exp_set (1 + i)
| eq_exp_sym : forall Œì t t' T,
  Œì ‚ä¢ t ‚âà t' : T ->
  Œì ‚ä¢ t' ‚âà t : T
| eq_exp_trans : forall Œì t1 t2 t3 T,
  Œì ‚ä¢ t1 ‚âà t2 : T ->
  Œì ‚ä¢ t2 ‚âà t3 : T ->
  Œì ‚ä¢ t1 ‚âà t3 : T
with EqSubst : Ctx -> Subst -> Subst -> Ctx -> Prop :=
| eq_subst_comp_id : forall Œì,
  ‚ä¢ Œì ->
  Œì ‚ä¢s subst_id ‚âà subst_id : Œì
| eq_subst_comp_shift : forall T Œì,
  ‚ä¢ (T :: Œì) ->
  (T :: Œì) ‚ä¢s ‚Üë ‚âà ‚Üë : Œì
| eq_subst_comp_comp : forall Œì1 Œì2 Œì3 œÉ1 œÉ1' œÉ2 œÉ2',
  Œì1 ‚ä¢s œÉ1 ‚âà œÉ1' : Œì2 ->
  Œì2 ‚ä¢s œÉ2 ‚âà œÉ2' : Œì3 ->
  Œì1 ‚ä¢s (œÉ2 ‚àò œÉ1) ‚âà (œÉ2' ‚àò œÉ1') : Œì3
| eq_subst_comp_ext : forall Œì Œî œÉ œÉ' t t' T i,
  Œì ‚ä¢s œÉ ‚âà œÉ' : Œî ->
  Œî ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ t ‚âà t' : T [ œÉ ] ->
  Œì ‚ä¢s subst_ext œÉ t ‚âà subst_ext œÉ' t' : (T :: Œî)
| eq_subst_id_l : forall Œì Œî œÉ,
  Œì ‚ä¢s œÉ : Œî ->
  Œì ‚ä¢s subst_id ‚àò œÉ ‚âà œÉ : Œî
| eq_subst_id_r : forall Œì Œî œÉ,
  Œì ‚ä¢s œÉ : Œî ->
  Œì ‚ä¢s œÉ ‚àò subst_id ‚âà œÉ : Œî
| eq_subst_assoc : forall Œì1 Œì2 Œì3 Œì4 œÉ1 œÉ2 œÉ3,
  Œì1 ‚ä¢s œÉ1 : Œì2 ->
  Œì2 ‚ä¢s œÉ2 : Œì3 ->
  Œì3 ‚ä¢s œÉ3 : Œì4 ->
  Œì1 ‚ä¢s (œÉ3 ‚àò œÉ2) ‚àò œÉ1 ‚âà œÉ3 ‚àò (œÉ2 ‚àò œÉ1) : Œì4
| eq_subst_prop_ext : forall Œì1 Œì2 Œì3 œÉ œÑ t T i,
  Œì1 ‚ä¢s œÑ : Œì2 ->
  Œì2 ‚ä¢s œÉ : Œì3 ->
  Œì3 ‚ä¢ T : ùïä i ->
  Œì2 ‚ä¢ t : T [ œÉ ] ->
  Œì1 ‚ä¢s subst_ext œÉ t ‚àò œÑ ‚âà subst_ext (œÉ ‚àò œÑ) (t [ œÑ ]) : (T :: Œì3) 
| eq_subst_eta_ext : forall Œì Œî œÉ T,
  Œì ‚ä¢s œÉ : (T :: Œî) ->
  Œì ‚ä¢s œÉ ‚âà subst_ext (‚Üë ‚àò œÉ) (exp_var 0 [œÉ]) : (T :: Œî)
| eq_subst_prop_shift : forall Œì Œî œÉ t T i,
  Œì ‚ä¢s œÉ : Œî ->
  Œî ‚ä¢ T : ùïä i ->
  Œì ‚ä¢ t : T [ œÉ ] ->
  Œì ‚ä¢s ‚Üë ‚àò (subst_ext œÉ t) ‚âà œÉ : Œî
| eq_subst_sym : forall Œì Œî œÉ œÉ',
  Œì ‚ä¢s œÉ ‚âà œÉ' : Œî ->
  Œì ‚ä¢s œÉ' ‚âà œÉ : Œî
| eq_subst_trans : forall Œì Œî œÉ1 œÉ2 œÉ3,
  Œì ‚ä¢s œÉ1 ‚âà œÉ2 : Œî ->
  Œì ‚ä¢s œÉ2 ‚âà œÉ3 : Œî ->
  Œì ‚ä¢s œÉ1 ‚âà œÉ3 : Œî
| eq_subst_conv : forall Œì Œî Œî' œÉ œÉ',
  Œì ‚ä¢s œÉ ‚âà œÉ' : Œî ->
  ‚ä¢ Œî ‚âà Œî' ->
  Œì ‚ä¢s œÉ ‚âà œÉ' : Œî'
where "‚ä¢ Œì" := (WfCtx Œì) and
      "‚ä¢ Œì ‚âà Œì'" := (EqCtx Œì Œì') and 
      "Œì ‚ä¢ t : T" := (Typing Œì t T) and 
      "Œì ‚ä¢s œÉ : Œî" := (SubstTyping Œì œÉ Œî) and 
      "Œì ‚ä¢ t ‚âà t' : T" := (EqExp Œì t t' T) and 
      "Œì ‚ä¢s œÉ ‚âà œÉ' : Œî" := (EqSubst Œì œÉ œÉ' Œî).

Scheme wf_ctx_ind := Induction for WfCtx Sort Prop
  with eq_ctx_ind := Induction for EqCtx Sort Prop
  with typing_ind := Induction for Typing Sort Prop
  with subst_typing_ind := Induction for SubstTyping Sort Prop
  with eq_exp_ind := Induction for EqExp Sort Prop 
  with eq_subst_ind := Induction for EqSubst Sort Prop.

Combined Scheme wf_ctx_eq_ctx_typing_subst_typing_eq_exp_eq_subst_mutind from wf_ctx_ind, eq_ctx_ind, typing_ind, subst_typing_ind, eq_exp_ind, eq_subst_ind.

Hint Constructors InCtx WfCtx EqCtx Typing SubstTyping EqExp EqSubst : core.
Hint Constructors nat : core.

Lemma wf_typ_in_wf_ctx : forall Œì T n,
  ‚ä¢ Œì ->
  n : T ‚àà Œì ->
  exists i, Œì ‚ä¢ T : exp_set i.
Proof.
  intros. induction H0; eauto.
  - inversion H; subst. exists i. econstructor; eauto.
  - inversion H; subst. apply IHInCtx in H3.
    destruct H3 as [i1].
    exists i1; eauto. eapply typing_conv with (T := (ùïä i1) [ ‚Üë ]); eauto.
Qed.

Lemma wf_typ_subst_inv : forall Œì Œî œÉ T i,
  Œì ‚ä¢s œÉ : Œî ->
  Œî ‚ä¢ T : exp_set i ->
  Œì ‚ä¢ T [ œÉ ] : exp_set i.
Proof.
  intros. eauto. 
Qed.

Lemma eq_typ_subst_inv : forall Œì Œî œÉ œÉ' T T' i,
  Œì ‚ä¢s œÉ : Œî ->
  Œì ‚ä¢s œÉ ‚âà œÉ' : Œî ->
  Œî ‚ä¢ T ‚âà T' : exp_set i ->
  Œì ‚ä¢ T [œÉ] ‚âà T' [œÉ'] : exp_set i.
Proof.
  intros. eapply eq_exp_conv; eauto.
Qed.

Lemma wf_typ_cumu_larger_add : forall Œì T i k,
  Œì ‚ä¢ T : exp_set i ->
  Œì ‚ä¢ T : exp_set (k + i).
Proof.
  intros.
  induction k; simpl in *; eauto.
Qed.

Lemma wf_typ_cumu_larger : forall Œì T i j,
  i <= j ->
  Œì ‚ä¢ T : exp_set i ->
  Œì ‚ä¢ T : exp_set j.
Proof.
  intros. assert (exists k, j = k + i).
  - clear H0. induction H; eauto.
    exists 0; auto.
    destruct IHle as [k]. exists (S k); lia.
  - destruct H1 as [k]. rewrite H1.
    apply wf_typ_cumu_larger_add. auto.
Qed.

Hint Resolve wf_typ_subst_inv : core.

Lemma eq_ctx_sym : forall Œì Œì',
  ‚ä¢ Œì ‚âà Œì' ->
  ‚ä¢ Œì' ‚âà Œì.
Proof.
  intros. induction H; eauto.
Qed.

Lemma eq_exp_refl : forall Œì t T,
  Œì ‚ä¢ t : T ->
  Œì ‚ä¢ t ‚âà t : T.
Proof.
  eauto.
Qed.

Lemma eq_subst_refl : forall Œì œÉ Œî,
  Œì ‚ä¢s œÉ : Œî ->
  Œì ‚ä¢s œÉ ‚âà œÉ : Œî.
Proof.
  eauto.
Qed.

Lemma eq_ctx_refl : forall Œì,
  ‚ä¢ Œì ->
  ‚ä¢ Œì ‚âà Œì.
Proof.
  intros. induction H; auto.
  - econstructor; eauto.
Qed.

Lemma eq_ctx_typing : forall Œì Œî t T,
  Œì ‚ä¢ t : T ->
  ‚ä¢ Œì ‚âà Œî ->
  Œî ‚ä¢ t : T.
Proof.
Admitted.

Lemma var0_subst_comp : forall Œì Œî œÉ T i,
  Œì ‚ä¢s œÉ : Œî ->
  Œî ‚ä¢ T : ùïä i ->
  ‚ä¢ (T [œÉ] :: Œì) ->
  (T [œÉ] :: Œì) ‚ä¢ exp_var 0 : T [œÉ ‚àò ‚Üë].
Proof.
  intros. inversion H1; subst; auto. 
  eapply typing_conv with (T := T [œÉ] [‚Üë]) (i:=i); eauto.
  eapply eq_exp_conv with (T := exp_set i [œÉ ‚àò ‚Üë]); eauto.
Qed.

Lemma suc_var1_nat : forall Œì T i,
  ‚ä¢ Œì ->
  (‚Ñï :: Œì) ‚ä¢ T : ùïä i ->
  (T :: ‚Ñï :: Œì) ‚ä¢ exp_suc (exp_var 1) : ‚Ñï [‚Üë ‚àò ‚Üë].
Proof.
  intros. eapply typing_conv with (T := ‚Ñï) (i:=0); eauto.
  - econstructor. eapply typing_conv with (T := ‚Ñï [‚Üë] [‚Üë]).
    eapply typing_var; eauto.
    eapply eq_exp_trans with (t2 := ‚Ñï [‚Üë ‚àò ‚Üë]) (T:=exp_set 0); eauto.
    + eapply eq_exp_conv with (T := exp_set 0 [‚Üë ‚àò ‚Üë]); eauto.
      eapply eq_exp_sym; eauto.
      eapply eq_exp_subst_comp; eauto.
      eapply eq_exp_prop_set; eauto.
      econstructor; eauto.
    + eapply eq_exp_prop_nat; eauto.
      econstructor; eauto.
  - eapply eq_exp_sym. eapply eq_exp_prop_nat; eauto.
      econstructor; eauto.
  Unshelve. all: eauto.
Qed.

Lemma ctx_upshift_same_type_twice : forall Œì T i,
  ‚ä¢ Œì ->
  Œì ‚ä¢ T : ùïä i ->
  (T [‚Üë] :: T :: Œì) ‚ä¢s ‚Üë : (T :: Œì).
Proof.
  intros. econstructor; eauto.
  econstructor; eauto.
Qed.

Lemma var0_subst_id : forall Œì T i,
  ‚ä¢ Œì ->
  Œì ‚ä¢ T : ùïä i ->
  (T :: Œì) ‚ä¢ exp_var 0 : T [‚Üë] [subst_id].
Proof.
  intros.  eapply typing_conv with (T := T [‚Üë]) (i:=i); eauto.
  apply eq_exp_sym; eauto.
Qed.

Lemma eq_typ_subst_comp : forall Œì1 Œì2 Œì3 œÉ1 œÉ2 T i,
  Œì1 ‚ä¢s œÉ1 : Œì2 ->
  Œì2 ‚ä¢s œÉ2 : Œì3 ->
  Œì3 ‚ä¢ T : exp_set i ->
  Œì1 ‚ä¢ T [œÉ2 ‚àò œÉ1] ‚âà T [œÉ2] [œÉ1] : exp_set i.
Proof.
  intros. 
  apply eq_exp_conv with (T := exp_set i [œÉ2 ‚àò œÉ1]) (i := 1 + i); eauto.
Qed.

Lemma subst_ext_shift_twice_comp_subst0_eq_id : forall T Œì i,
  ‚ä¢ Œì ->
  Œì ‚ä¢ T : exp_set i ->
  (T :: Œì) ‚ä¢s subst_ext (‚Üë ‚àò ‚Üë) (exp_var 0) ‚àò (subst_ext subst_id (exp_var 0)) ‚âà subst_id : (T :: Œì).
Proof with eauto using ctx_upshift_same_type_twice, var0_subst_id, eq_typ_subst_comp.
  intros. apply eq_subst_trans with (œÉ2 := subst_ext ((‚Üë ‚àò ‚Üë) ‚àò (subst_ext subst_id (exp_var 0))) (exp_var 0 [ subst_ext subst_id (exp_var 0)])); eauto.
  - eapply eq_subst_prop_ext with (Œì2:=T [‚Üë] :: T :: Œì); eauto.
    + econstructor; eauto. eapply var0_subst_id; eauto. 
    + econstructor; eauto; econstructor; eauto.
      econstructor; eauto.
    + eapply var0_subst_comp; eauto.
      econstructor; eauto.
  - assert ((T [‚Üë] :: T :: Œì) ‚ä¢s ‚Üë : (T :: Œì)). {
      repeat (econstructor; eauto).
    }
    assert (‚ä¢ (T [‚Üë] :: T :: Œì)). {
      repeat (econstructor; eauto).
    }
    assert ((T :: Œì) ‚ä¢ exp_var 0 [subst_ext subst_id (exp_var 0)] : T [‚Üë]). {
      inversion H2; subst; auto.
      eapply typing_conv with (T := T [‚Üë] [‚Üë] [subst_ext subst_id (exp_var 0)]) (i := i0); eauto...
        do 4 (econstructor; eauto).
      eapply eq_exp_trans with (t2:=T [‚Üë] [‚Üë ‚àò subst_ext subst_id (exp_var 0)]); eauto.
        eapply eq_exp_conv with (T := exp_set i0 [‚Üë ‚àò subst_ext subst_id (exp_var 0)]) (i:=1 + i0).
        eapply eq_exp_sym; eauto. eapply eq_exp_subst_comp; eauto... repeat (econstructor; eauto). 
      eapply eq_exp_trans with (t2:=T [‚Üë] [subst_id]); eauto...
      eapply eq_typ_subst_inv...
      econstructor; eauto...
    }
    assert ((T :: Œì) ‚ä¢s subst_ext subst_id (exp_var 0) : (T [‚Üë] :: T :: Œì)). {
      econstructor; eauto.
      eapply var0_subst_id; eauto.
    }
    eapply eq_subst_trans with (œÉ2:=subst_ext (‚Üë ‚àò (‚Üë ‚àò subst_ext subst_id (exp_var 0))) (exp_var 0 [subst_ext subst_id (exp_var 0)])).
    eapply eq_subst_comp_ext; eauto.
    eapply eq_exp_conv with (T := T [(‚Üë ‚àò ‚Üë)] [subst_ext subst_id (exp_var 0)]) (i:=i); eauto.
      econstructor; eauto. eapply eq_exp_refl; eauto. eapply var0_subst_comp; eauto.
      eapply eq_exp_conv with (T := exp_set i [(‚Üë ‚àò ‚Üë) ‚àò subst_ext subst_id (exp_var 0)]) (i:=1+i); eauto.
      eapply eq_exp_sym...
      eapply eq_exp_prop_set; eauto.
    eapply eq_subst_trans with (œÉ2:=subst_ext (‚Üë ‚àò subst_id) (exp_var 0 [subst_ext subst_id (exp_var 0)])).
      eapply eq_subst_comp_ext; eauto. eapply eq_subst_comp_comp with (Œì2:=T :: Œì); eauto.
      eapply eq_subst_prop_shift with (T := T [‚Üë]); eauto...
      eapply eq_exp_conv with (T := T [‚Üë ‚àò ‚Üë]  [subst_ext subst_id (exp_var 0)]) (i := i). 
        eapply eq_exp_refl. 
        eapply typing_subst with (Œî:=T [‚Üë] :: T :: Œì); eauto...
        eapply var0_subst_comp; eauto...
        eapply eq_exp_trans with (t2 := T [(‚Üë ‚àò ‚Üë) ‚àò subst_ext subst_id (exp_var 0)]); eauto.
        eapply eq_exp_conv with (T := exp_set i [(‚Üë ‚àò ‚Üë) ‚àò subst_ext subst_id (exp_var 0)]); eauto.
        eapply eq_exp_sym. eapply eq_exp_subst_comp; eauto...
          econstructor; eauto.
          eapply eq_typ_subst_inv; eauto.
    eapply eq_subst_trans with (œÉ2:=subst_ext (‚Üë ‚àò subst_id) (exp_var 0))...
      eapply eq_subst_comp_ext; eauto... econstructor; eauto...
      eapply eq_exp_conv with (T := T [‚Üë] [subst_id]); eauto.
      eapply eq_exp_subst_ext_var_0; eauto. eapply var0_subst_id; eauto.
      eapply eq_exp_sym... eapply eq_typ_subst_comp; eauto.
    eapply eq_subst_trans with (œÉ2:=subst_ext (‚Üë ‚àò subst_id) (exp_var 0 [subst_id])); eauto.
      eapply eq_subst_comp_ext; eauto. econstructor; eauto.
      eapply eq_exp_sym. eapply eq_exp_subst_id; eauto.
      eapply typing_conv with (T := T [‚Üë] [subst_id]) (i:=i); eauto.
      eapply var0_subst_id; eauto.
      eapply eq_exp_sym; eauto.
      eapply eq_typ_subst_comp; eauto.
Qed.
 
Lemma presupposition : 
  (forall Œì, ‚ä¢ Œì -> ‚ä¢ Œì ) /\ 
  (forall Œì Œî, ‚ä¢ Œì ‚âà Œî -> ‚ä¢ Œì /\ ‚ä¢ Œî) /\
  (forall Œì t T, Œì ‚ä¢ t : T -> ‚ä¢ Œì /\ exists i, Œì ‚ä¢ T : exp_set i) /\
  (forall Œì œÉ Œî, Œì ‚ä¢s œÉ : Œî -> ‚ä¢ Œì /\ ‚ä¢ Œî) /\
  (forall Œì t t' T, Œì ‚ä¢ t ‚âà t' : T -> ‚ä¢ Œì /\ Œì ‚ä¢ t : T /\ Œì ‚ä¢ t' : T /\ exists i, Œì ‚ä¢ T : exp_set i) /\
  (forall Œì œÉ œÉ' Œî, Œì ‚ä¢s œÉ ‚âà œÉ' : Œî -> ‚ä¢ Œì /\ Œì ‚ä¢s œÉ : Œî /\ Œì ‚ä¢s œÉ' : Œî /\ ‚ä¢ Œî).
Proof.
  apply wf_ctx_eq_ctx_typing_subst_typing_eq_exp_eq_subst_mutind; intros; try solve [ intuition; eauto ].
  - intuition.
    eapply wf_typ_in_wf_ctx; eauto.
  - intuition. exists i; eauto.
    eapply wf_typ_subst_inv with (Œî:=‚Ñï :: Œì); eauto.
    econstructor; eauto.
  - intuition. destruct H2 as [i1]. destruct H3 as [i2].
    exists (max i i2). econstructor; eauto.
    + eapply wf_typ_cumu_larger with (i:=i); auto. lia.
    + eapply wf_typ_cumu_larger with (i:=i2); auto. lia.
  - intuition. exists i.
    unfold subst0. 
    eapply wf_typ_subst_inv with (Œî:=S :: Œì); eauto.
    econstructor; econstructor; eauto.
  - intuition. destruct H3 as [i]. eauto. 
  - inversion H; subst; eauto. 
  - intuition. 
    + eapply typing_conv with (T := ùïä i [ œÉ ]); eauto.
    + eapply typing_pi; eauto.
      eapply typing_conv with (T:=ùïä i [subst_ext (œÉ ‚àò ‚Üë) (exp_var 0)]) (i := 1 + i); eauto.
      econstructor; eauto.
      * econstructor; eauto.
        eapply typing_conv with (T := S [œÉ] [‚Üë]) (i:=i); eauto.
        eapply eq_exp_conv with (T := ùïä i [œÉ ‚àò ‚Üë]) (i := 1 + i); eauto.
        apply eq_exp_sym. eapply eq_exp_subst_comp; eauto.
        econstructor; eauto.
      * eapply eq_exp_prop_set with (Œî := S :: Œî); eauto.
        destruct H4 as [i1].
        eapply subst_typing_ext with (i := i).
        eapply subst_typing_comp with (Œì2:=Œì); eauto. auto.
        eapply typing_conv with (T := S [ œÉ ] [ ‚Üë ]) (i := i); eauto.
        eapply eq_exp_sym.
        eapply eq_exp_conv with (T := ùïä i [œÉ ‚àò ‚Üë]) (i := 1 + i); eauto.
        econstructor; eauto.
    + eauto. 
  - intuition.
    + eapply typing_conv with (T:=T [subst_ext subst_id s] [œÉ]) (i:=i); eauto.
      econstructor; eauto. econstructor; eauto.
      apply eq_exp_trans with (t2:=T [subst_ext subst_id s ‚àò œÉ]); eauto.
      eapply eq_exp_conv with (T:=exp_set i [subst_ext subst_id s ‚àò œÉ]); eauto.
      eapply eq_exp_sym. eapply eq_exp_subst_comp; eauto. econstructor; eauto.
      repeat (econstructor; eauto).
      eapply eq_typ_subst_inv; eauto. repeat (econstructor; eauto).
      eapply eq_subst_trans with (œÉ2:=subst_ext (subst_id ‚àò œÉ) (s [œÉ])); eauto.
      eapply eq_subst_prop_ext; eauto.
      eapply eq_subst_comp_ext; eauto.
      eapply eq_exp_conv with (T:=S [œÉ]) (i:=i); eauto.
      eapply eq_exp_refl; eauto.
      eapply eq_typ_subst_inv; eauto.
    + eapply typing_conv with (T := T [subst_ext (œÉ ‚àò ‚Üë) (exp_var 0)] [| s [œÉ] ]) (i:=i).
      * eapply typing_app with (S:=S [œÉ]) (i:=i); eauto.
        eapply wf_typ_subst_inv; eauto.
        econstructor; eauto.
        eapply typing_conv with (T := S [œÉ] [‚Üë]) (i := i); eauto.
        eapply eq_exp_conv with (T := (exp_set i) [œÉ ‚àò ‚Üë]) (i := 1 + i); eauto.
        eapply eq_exp_sym. eauto.
        econstructor; eauto.
      * assert (Œì ‚ä¢s subst_ext subst_id (s [œÉ]) : (S [œÉ] :: Œì)). {
          repeat (econstructor; eauto).
        }
        assert (Œì ‚ä¢ s [œÉ] : S [œÉ] [subst_id]). {
          repeat (econstructor; eauto).
        }
        assert (Œì ‚ä¢s subst_ext (œÉ ‚àò ‚Üë) (exp_var 0) ‚àò subst_ext subst_id (s [œÉ]) ‚âà  subst_ext œÉ (s [œÉ]) : (S :: Œî)). {
          eapply eq_subst_trans with (œÉ2 := subst_ext ((œÉ ‚àò ‚Üë) ‚àò subst_ext subst_id (s [œÉ])) ((exp_var 0) [subst_ext subst_id (s [œÉ])])); eauto.
            eapply eq_subst_prop_ext; eauto. eapply var0_subst_comp; eauto.
          eapply eq_subst_comp_ext; eauto.
            eapply eq_subst_trans with (œÉ2:=œÉ ‚àò ‚Üë ‚àò subst_ext subst_id (s [œÉ])); eauto.
            eapply eq_subst_trans with (œÉ2:=œÉ ‚àò subst_id); eauto.
            eapply eq_subst_comp_comp; eauto.
          eapply eq_exp_conv with (T := S [œÉ] [subst_id]) (i := i); eauto.
          eapply eq_exp_trans with (t2 := S [œÉ ‚àò ‚Üë ‚àò subst_ext subst_id (s [œÉ])]); eauto.
          apply eq_exp_trans with (t2 := S [œÉ ‚àò subst_id]); eauto.
            eapply eq_exp_sym. eapply eq_typ_subst_comp; eauto.
            eapply eq_typ_subst_inv; eauto. eapply eq_subst_comp_comp; eauto.
          eapply eq_typ_subst_inv; eauto. econstructor; eauto.
          eapply eq_subst_sym. eapply eq_subst_assoc; eauto.
        }
        unfold subst0. eapply eq_exp_trans with (t2 := T [subst_ext (œÉ ‚àò ‚Üë) (exp_var 0) ‚àò subst_ext subst_id (s [œÉ])]); eauto.
        eapply eq_exp_conv with (T := exp_set i  [subst_ext (œÉ ‚àò ‚Üë) (exp_var 0) ‚àò subst_ext subst_id (s [œÉ])]) (i := 1 + i); eauto.
        eapply eq_exp_sym; eauto. eapply eq_exp_subst_comp with (Œì2:=S [œÉ] :: Œì); eauto.
        econstructor; eauto.
        eapply var0_subst_comp; eauto.
        eapply eq_exp_prop_set with (Œî:=S :: Œî). 
        eapply subst_typing_comp with (Œì2:=S [œÉ] :: Œì); eauto. econstructor; eauto.
        eapply var0_subst_comp; eauto.
        eapply eq_typ_subst_inv; eauto. 
        eapply subst_typing_comp with (Œì2:=S [œÉ] :: Œì); eauto.
        econstructor; eauto. 
        eapply var0_subst_comp; eauto.
    + exists i; eauto.
      eapply wf_typ_subst_inv with (œÉ := subst_ext œÉ (s [œÉ])); eauto.
      econstructor; eauto.
  - intuition; destruct H8 as [i1].
    + eapply typing_conv with (T := T [subst_ext subst_id tn] [œÉ]) (i:=i); eauto.
      eapply eq_exp_trans with (t2:=T [subst_ext subst_id tn ‚àò œÉ]); eauto.
      eapply eq_exp_sym; eauto.
      eapply eq_exp_conv with (T := exp_set i [subst_ext subst_id tn ‚àò œÉ]) (i:=1+i); eauto.
      eapply eq_exp_subst_comp with (Œì3:=‚Ñï::Œî); eauto.
      eapply subst_typing_ext; eauto.
      eapply eq_exp_prop_set with (Œî:=‚Ñï::Œî); eauto. 
      econstructor; eauto. econstructor; eauto.
      eapply eq_typ_subst_inv; eauto.
      repeat (econstructor; eauto).
      eapply eq_subst_trans with (œÉ2:=subst_ext (subst_id ‚àò œÉ) (tn [œÉ])); eauto.
      eapply eq_subst_prop_ext; eauto.
      eapply eq_subst_comp_ext; eauto. eapply eq_exp_conv with (T :=  ‚Ñï [subst_id] [œÉ]) (i:=0); eauto.
      * econstructor; eauto. eapply eq_exp_conv with (T := ‚Ñï); eauto.
      * eapply eq_exp_conv with (T := exp_set 0 [subst_id ‚àò œÉ]); eauto.
    + eapply typing_conv with (T := T [q œÉ] [|tn [œÉ]]) (i:=i1); eauto.
      eapply typing_rec with (i:=i1).
      * admit. (* 1, *)
      * admit. (* 2, *)
      * admit. (* 3, *)
      * econstructor; eauto.
      * unfold q. admit. (* 4, *)
    + exists i; eauto.
      eapply wf_typ_subst_inv with (œÉ := subst_ext œÉ (tn [œÉ])); eauto.
      econstructor; eauto.
  - intuition; inversion H; subst; destruct H3 as [i1]; eauto.
    + eapply typing_conv with (T := exp_pi (S [œÉ]) (T [subst_ext (œÉ ‚àò ‚Üë) (exp_var 0)])) (i:=max i i1); eauto.
      * econstructor; eauto. econstructor; eauto.
        econstructor; eauto.
        eapply var0_subst_comp; eauto.
      * apply eq_exp_sym; eauto.
        eapply eq_exp_prop_pi; eauto.
        -- eapply wf_typ_cumu_larger with (i:=i); auto. lia.
        -- eapply wf_typ_cumu_larger with (i:=i1); auto. lia.
    + exists (max i i1); eauto.
      eapply wf_typ_subst_inv; eauto.
      econstructor; eauto. 
      * eapply wf_typ_cumu_larger with (i:=i); auto. lia.
      * eapply wf_typ_cumu_larger with (i:=i1); auto. lia.
  - intuition. 
    econstructor; eauto. 
    eapply eq_ctx_typing; eauto using eq_ctx_refl. 
  - intuition.
    eapply wf_typ_in_wf_ctx; eauto.
  - intuition; eauto.
    + eapply typing_conv with (T := T [| s' ]) (i := i); eauto.
      apply eq_exp_conv with (T := ùïä i [|s']) (i := 1 + i); eauto.
      eapply eq_exp_comp_subst; eauto.
      eapply eq_subst_comp_ext; eauto.
      econstructor; eauto. econstructor; eauto.
    + exists i. eapply wf_typ_subst_inv; eauto.
      econstructor; eauto.
  (* eq_exp_comp_rec *)
  - intuition; eauto.
    + eapply typing_conv with (T := T' [| tn' ]) (i:=i); eauto.
      * eapply typing_rec; eauto.
       eapply typing_conv with (T:= T [|exp_zero]) (i:=i); eauto.
       eapply eq_typ_subst_inv; eauto;
       repeat (econstructor; eauto). 
       eapply typing_conv with (T := T [subst_ext (‚Üë ‚àò ‚Üë) (exp_suc (exp_var 1))]) (i:=i); eauto.
       eapply eq_ctx_typing with (Œì:=(T :: ‚Ñï :: Œì)); eauto. econstructor; eauto. apply eq_ctx_refl; auto.
       eapply eq_typ_subst_inv; eauto.
       econstructor; eauto. eapply suc_var1_nat; eauto.
       eapply eq_subst_comp_ext; eauto.
       eapply eq_exp_refl. eapply suc_var1_nat; eauto.
      * eapply eq_typ_subst_inv; eauto. econstructor; eauto.
        econstructor; eauto. econstructor; eauto. 
    + exists i. eapply wf_typ_subst_inv; eauto. econstructor; eauto.
  - intuition; eauto. 
    + destruct H5 as [i1]. exists (max i i1); eauto.
      econstructor; eauto.
      * eapply wf_typ_cumu_larger with (i:=i); auto. lia.
      * eapply wf_typ_cumu_larger with (i:=i1); auto. lia.
  - intuition; eauto.
    + destruct H7 as [i]. eapply typing_conv with (T := T [œÉ']) (i:=i); eauto.
      eapply eq_typ_subst_inv; eauto.
    + destruct H7 as [i]. eauto. 
  - intuition; eauto. 
    + econstructor; eauto. econstructor; eauto.
    + destruct H6 as [i1]. exists i1; auto.
      eapply wf_typ_subst_inv; eauto. econstructor; eauto.
  - intuition; eauto.
    + eapply typing_conv with (T := T [subst_ext (‚Üë ‚àò ‚Üë) (exp_suc (exp_var 1))] [subst_ext (subst_ext subst_id tn)
          (exp_rec T tz ts tn)]) (i:=i); eauto.
      repeat (econstructor; eauto).
      admit. (* 5, *** *)
    + exists i; auto.
      eapply wf_typ_subst_inv with (Œî:=‚Ñï :: Œì); eauto. 
      econstructor; eauto. econstructor; eauto.
  - intuition. econstructor; eauto.
    eapply typing_conv with (T := T [subst_ext (‚Üë ‚àò ‚Üë) (exp_var 0)] [| exp_var 0] ) (i := i); eauto.
    eapply typing_app with (S := S [‚Üë]) (i := i).
    inversion t2; subst; eauto.
    + eapply wf_typ_subst_inv; eauto.
      econstructor; eauto. econstructor; eauto.
      eapply var0_subst_comp; eauto.
    + econstructor; eauto. 
    + econstructor; eauto.
    + unfold subst0.
      apply eq_exp_trans with (t2 := T [subst_ext (‚Üë ‚àò ‚Üë) (exp_var 0) ‚àò subst_ext subst_id (exp_var 0)]); eauto.
      eapply eq_exp_sym; eauto. 
      eapply eq_exp_conv with (T := exp_set i [subst_ext (‚Üë ‚àò ‚Üë) (exp_var 0) ‚àò subst_ext subst_id (exp_var 0)]); eauto.
      eapply eq_exp_subst_comp with (Œì2:=S [‚Üë] :: S :: Œì); eauto.
      eapply subst_typing_ext with (Œî:=S :: Œì); eauto.
      eapply typing_conv with (T := S [‚Üë]); eauto.
        econstructor; eauto. econstructor; eauto. 
        eapply var0_subst_comp; eauto. 
        eapply eq_exp_prop_set with (Œî:=S :: Œì); eauto.
        eapply subst_typing_comp with (Œì2:=S [‚Üë] :: S :: Œì); eauto.
        econstructor; eauto. eapply typing_conv with (T := S [‚Üë]); eauto.
        econstructor; eauto. econstructor; eauto. eapply var0_subst_comp; eauto.
      eapply eq_exp_trans with (t2 := T [subst_id]); eauto.
      eapply eq_typ_subst_inv; eauto.
      eapply subst_typing_comp with (Œì2:=S [‚Üë] :: S :: Œì); eauto.
        econstructor; eauto. eapply typing_conv with (T := S [‚Üë]); eauto. 
        econstructor; eauto. econstructor; eauto. 
        eapply var0_subst_comp; eauto.
      eapply subst_ext_shift_twice_comp_subst0_eq_id; eauto.
  - intuition. destruct H1 as [i]. eauto.
  - intuition. inversion H; subst; eauto.
    inversion H; subst; auto.
    apply wf_typ_in_wf_ctx in i; eauto.
    destruct i as [i1]. exists i1; eauto.
  - intuition; destruct H5 as [i]; eauto.
    + eapply typing_conv with (T := T [œÉ2]  [œÉ1]) (i := i); eauto.
      eapply eq_exp_conv with (T := ùïä i [œÉ2 ‚àò œÉ1]) (i := 1 + i); eauto.
  - intuition. 
    destruct H5 as [i1].
    eapply typing_conv with (T:=S [ ‚Üë ] [subst_ext œÉ s]) (i:=i).
    econstructor; eauto. econstructor; eauto. econstructor; eauto.
    eapply eq_exp_trans with (t2:=S [‚Üë ‚àò (subst_ext œÉ s)]); eauto.
    apply eq_exp_sym. 
    eapply eq_exp_conv with (T := exp_set i [‚Üë ‚àò subst_ext œÉ s]) (i:=1+i); eauto.
    eapply eq_exp_subst_comp; eauto;
    repeat (econstructor; eauto). 
    repeat (econstructor; eauto). 
    eapply eq_typ_subst_inv; eauto.
    repeat (econstructor; eauto).
  (* eq_subst_ext *)
  - intuition; eauto. 
    + apply wf_typ_in_wf_ctx in i0 as Hwft; eauto. 
      destruct Hwft as [i1].
      eapply typing_conv with (T:=T [‚Üë] [subst_ext œÉ s] ) (i:=i1); eauto.
      eapply typing_subst with (Œî:=S :: Œî); eauto.
      eapply eq_exp_trans with (t2:=T [‚Üë ‚àò subst_ext œÉ s]); eauto.
      eapply eq_exp_conv with (T:=exp_set i1 [‚Üë ‚àò subst_ext œÉ s]) (i:=1+i1); eauto.
      apply eq_exp_sym; eauto. eapply eq_exp_subst_comp with (Œì2:=S::Œî);  eauto.
      eapply eq_exp_prop_set with (Œî:=Œî); eauto. 
      eapply subst_typing_comp with (Œì2:=S :: Œî); eauto.
      eapply eq_typ_subst_inv; eauto.
      apply subst_typing_comp with (Œì2:=S :: Œî); eauto.
    + apply wf_typ_in_wf_ctx in i0; eauto. 
      destruct i0 as [i1]. eauto.
  (* eq_subst_shift *)
  - intuition. inversion H; subst; eauto. 
  - intuition; eauto.
    econstructor; eauto.
    eapply typing_conv with (i:=i); eauto.
    eapply eq_typ_subst_inv; eauto. 
  - intuition; eauto.
    econstructor; eauto.
    eapply typing_conv with (i:=i); eauto.
    eapply eq_exp_conv with (T := ùïä i [œÉ ‚àò œÑ]) (i := 1 + i); eauto.
  - intuition; eauto. inversion H1; subst; eauto.
    econstructor; eauto.
    eapply typing_conv with (T := T [‚Üë] [œÉ]) (i := i); eauto.
    eapply eq_exp_sym. eapply eq_exp_conv with (T := exp_set i [‚Üë ‚àò œÉ]); eauto.
  - intuition. econstructor; eauto.
    econstructor; eauto.
    econstructor; eauto.
  Unshelve. all : eauto. 
Admitted.
  

